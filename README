timberwoof/PDP11

Introduction
============
This document describes the timberwoof/PDP11 project.

timberwoof/PDP11 is an attempt to write, independently of any existing code influencess,
an emulator for the basic PDP/11 instruction set. The environment is Python 3. The initial
test of the code is a hello world program and published PDP11 CPU test code.

Modules
=======
main.py
-------
Startup
instruction dispatch
processor loop

pdp11ram.py
----------
implements 64kB of byte-addressible RAM.
Provides access primitives and two convenience functions,
octal-to-decimal conversion and to read an assembled assembly file into RAM.
Provides one io device, the serial output.

pdp11psw.py
-----------
implements the Processtor Status Word.
Does some initializations and provides access primitives.
Provides a neat way to set the PSW after instructions.
Calls resemble PDP-11 processor handbook notation.

pdp11.reg.py
------------
implements the register file.
Provides access primitives that implement various PDP11 ways of doing things.

pdp11Boot.py
------------
convenience library for loading programs from code or file into pdp-11 ram.
Sets up the instruction dispatch tables
Reads the (hard-coded for now) assembly file into ram.
Starts the processor loop.

pdp11Branch.py - implements branch instructions
pdp11NoOperand.py - implements no-operand instructions
pdp11SingleOperand.py - implements single-operand instructions
pdp11DoubleOperand.py - implements double-operand instructions
pdp11Other.py - implements other instrucutions
pdp11AddressMode.py - sets up and takes down source and destination for the address modes.


Installation
============
Grab the repository.
Open it in your favorite IDE.
Run.

Current State of the Project
============================
Runs Hellow World project.
Runs much of M9301-YA. Pukes pretty quickly on the others.


To Do
=====
Proper logging with settable log levels. FUck logging.
    PyCharm and Logging don't get along and it's too much work reading through nonsplanations.

Provide a proper DL11 console as a separate Python window connected to a serial terminal.
tkinter
https://likegeeks.com/python-gui-examples-tkinter-tutorial/
most of the examples are fucking ugly


Set up Pytest.
    set up the thing as a proper application that will load and run some code.
Provide stack access methods.
Get the diagnostics running
Get a virtual disk running
Get a small OS running. mini-unix (no MMU needed)
Get PacMan or Space Wars running
FP-11
Implement ODT https://gunkies.org/wiki/QBUS_CPU_ODT
Get that assembler running.


RK02 1.22MB
03 2.45MB
05 2.45MB
06 13.8MB
07 27.6MB

Mini-Unix
http://www.tavi.co.uk/unixhistory/mini-unix.html
magtape and RK05

••• DL11 communications controller
http://gunkies.org/wiki/DL11_asynchronous_serial_line_interface
address 0777560, vector 060

DC11 communications controller 774000
http://gunkies.org/wiki/DC11_asynchronous_serial_line_interface

DH11 communications controller
RK05 images - munixrks.zip
installation tape - munix-tap
initialization files - munix-initfiles
need devices
tm0 - tape - munix.tap
rk0 - first RK05 - system.dsk
rk1 - source.dsk
rk2 - doc.dsk

RK05 emulator in python
a library that talks to pdp11ram.py
pdp11.py should be able to take as a parameter "setup.ini"
and that needs to be able to set up the emulated
tapes and drives and to slam stuff into memory
wants an 11/20
sim>quit should write simulated disk to disk file